// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	issue "github.com/FFFcomewhere/issue-example/app/issuecenter/api/internal/handler/issue"
	milestone "github.com/FFFcomewhere/issue-example/app/issuecenter/api/internal/handler/milestone"
	other "github.com/FFFcomewhere/issue-example/app/issuecenter/api/internal/handler/other"
	tag "github.com/FFFcomewhere/issue-example/app/issuecenter/api/internal/handler/tag"
	"github.com/FFFcomewhere/issue-example/app/issuecenter/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/issue",
				Handler: issue.IssueHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/issue/new",
				Handler: issue.IssuenewHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/issue/signal",
				Handler: issue.IssuesignalHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/milestone",
				Handler: milestone.MilestoneHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/milestone/new",
				Handler: milestone.MilestonenewHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/milestone/signal",
				Handler: milestone.MilestonesignalHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/tag",
				Handler: tag.TagHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tag/new",
				Handler: tag.TagnewHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/tag/signal",
				Handler: tag.TagsignalHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/issue/search",
				Handler: other.IssuesearchHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
	)
}
