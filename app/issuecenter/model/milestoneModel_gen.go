// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/FFFcomewhere/issue-example/common/globalkey"
	"github.com/FFFcomewhere/issue-example/common/xerr"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	milestoneFieldNames          = builder.RawFieldNames(&Milestone{})
	milestoneRows                = strings.Join(milestoneFieldNames, ",")
	milestoneRowsExpectAutoSet   = strings.Join(stringx.Remove(milestoneFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	milestoneRowsWithPlaceHolder = strings.Join(stringx.Remove(milestoneFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheIssueExampleMilestoneIdPrefix   = "cache:issueExample:milestone:id:"
	cacheIssueExampleMilestoneNamePrefix = "cache:issueExample:milestone:name:"
)

type (
	milestoneModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Milestone) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Milestone, error)
		FindOneByName(ctx context.Context, name string) (*Milestone, error)
		Update(ctx context.Context, session sqlx.Session, data *Milestone) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *Milestone) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultMilestoneModel struct {
		sqlc.CachedConn
		table string
	}

	Milestone struct {
		Id         int64     `db:"id"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		DeleteTime time.Time `db:"delete_time"`
		DelState   int64     `db:"del_state"`
		Version    int64     `db:"version"` // 版本号
		Name       string    `db:"name"`    // 里程碑名称
	}
)

func newMilestoneModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultMilestoneModel {
	return &defaultMilestoneModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`milestone`",
	}
}

func (m *defaultMilestoneModel) Insert(ctx context.Context, session sqlx.Session, data *Milestone) (sql.Result, error) {
	data.DeleteTime = time.Unix(0, 0)
	issueExampleMilestoneIdKey := fmt.Sprintf("%s%v", cacheIssueExampleMilestoneIdPrefix, data.Id)
	issueExampleMilestoneNameKey := fmt.Sprintf("%s%v", cacheIssueExampleMilestoneNamePrefix, data.Name)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, milestoneRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.Name)
		}
		return conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.Name)
	}, issueExampleMilestoneIdKey, issueExampleMilestoneNameKey)
}

func (m *defaultMilestoneModel) FindOne(ctx context.Context, id int64) (*Milestone, error) {
	issueExampleMilestoneIdKey := fmt.Sprintf("%s%v", cacheIssueExampleMilestoneIdPrefix, id)
	var resp Milestone
	err := m.QueryRowCtx(ctx, &resp, issueExampleMilestoneIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", milestoneRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMilestoneModel) FindOneByName(ctx context.Context, name string) (*Milestone, error) {
	issueExampleMilestoneNameKey := fmt.Sprintf("%s%v", cacheIssueExampleMilestoneNamePrefix, name)
	var resp Milestone
	err := m.QueryRowIndexCtx(ctx, &resp, issueExampleMilestoneNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? and del_state = ? limit 1", milestoneRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name, globalkey.DelStateNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMilestoneModel) Update(ctx context.Context, session sqlx.Session, data *Milestone) (sql.Result, error) {
	issueExampleMilestoneIdKey := fmt.Sprintf("%s%v", cacheIssueExampleMilestoneIdPrefix, data.Id)
	issueExampleMilestoneNameKey := fmt.Sprintf("%s%v", cacheIssueExampleMilestoneNamePrefix, data.Name)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, milestoneRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.Name, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.Name, data.Id)
	}, issueExampleMilestoneNameKey, issueExampleMilestoneIdKey)
}

func (m *defaultMilestoneModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, data *Milestone) error {

	oldVersion := data.Version
	data.Version += 1

	var sqlResult sql.Result
	var err error

	issueExampleMilestoneIdKey := fmt.Sprintf("%s%v", cacheIssueExampleMilestoneIdPrefix, data.Id)
	issueExampleMilestoneNameKey := fmt.Sprintf("%s%v", cacheIssueExampleMilestoneNamePrefix, data.Name)
	sqlResult, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ? and version = ? ", m.table, milestoneRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.Name, data.Id, oldVersion)
		}
		return conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.Name, data.Id, oldVersion)
	}, issueExampleMilestoneNameKey, issueExampleMilestoneIdKey)
	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return xerr.NewErrCode(xerr.DB_UPDATE_AFFECTED_ZERO_ERROR)
	}

	return nil
}

func (m *defaultMilestoneModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	issueExampleMilestoneIdKey := fmt.Sprintf("%s%v", cacheIssueExampleMilestoneIdPrefix, id)
	issueExampleMilestoneNameKey := fmt.Sprintf("%s%v", cacheIssueExampleMilestoneNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, issueExampleMilestoneIdKey, issueExampleMilestoneNameKey)
	return err
}

func (m *defaultMilestoneModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheIssueExampleMilestoneIdPrefix, primary)
}
func (m *defaultMilestoneModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", milestoneRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary, globalkey.DelStateNo)
}

func (m *defaultMilestoneModel) tableName() string {
	return m.table
}
